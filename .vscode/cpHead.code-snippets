{
	// Place your competitive-programming workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
  "CP Header": {
    "prefix": "cphead",
    "body": [
      "\"\"\"",
      "${1:Platform} #${2:ID}: ${3:Problem Name}",
      "Tags: ${4|Arrays,DP,Graphs,Strings,Greedy,DFS,BFS,Binary Search|}",
      "Difficulty: ${5|Easy,Medium,Hard|}",
      "URL: ${6:https://...}",
      "",
      "Approach:",
      "1. ${7:Key step}",
      "2. ${8:Next step}",
      "",
      "Time Complexity: O(${9})",
      "Space Complexity: O(${10})",
      "",
      "Solved: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "\"\"\""
    ]
  },
  "Basic C++ main function": {
    	"prefix": "maincpp",
    	"body": [
      	
		"#include <bits/stdc++.h>",
		"using namespace std;",
      	"",
      	"int main()",
      	"{",
      	"    ios_base::sync_with_stdio(false);",
      	"    cin.tie(nullptr);",
      	"    return 0;",
      	"}"
    	],
    	"description": "Insert C++ main function template"
	}
}
